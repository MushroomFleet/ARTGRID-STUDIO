import React, { useState } from 'react';

const ExportPanel = ({ canvasRef, options }) => {
  const [isExporting, setIsExporting] = useState(false);
  const [exportStatus, setExportStatus] = useState('');
  const [filename, setFilename] = useState('circuit-v2-pattern');

  // Export as SVG by converting canvas to SVG
  const exportSVG = async () => {
    setIsExporting(true);
    setExportStatus('Preparing SVG export...');
    
    try {
      const canvas = canvasRef.current;
      if (!canvas) {
        throw new Error('Canvas not found');
      }

      const svgWidth = canvas.width;
      const svgHeight = canvas.height;
      
      // Create SVG content with embedded canvas data
      const canvasDataURL = canvas.toDataURL('image/png');
      
      const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${svgWidth}" height="${svgHeight}" viewBox="0 0 ${svgWidth} ${svgHeight}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <!-- Generated by Circuit V2 Generator -->
  <!-- Canvas Size: ${svgWidth}x${svgHeight} -->
  <!-- Grid: ${options.grid.cellsX}x${options.grid.cellsY} -->
  <!-- Seed: ${options.randomSeed} -->
  
  <defs>
    <style>
      .circuit-pattern { image-rendering: pixelated; }
    </style>
  </defs>
  
  <!-- Background -->
  <rect width="${svgWidth}" height="${svgHeight}" fill="${options.colors.background.color}" />
  
  <!-- Pattern Data -->
  <image x="0" y="0" width="${svgWidth}" height="${svgHeight}" 
         href="${canvasDataURL}" 
         class="circuit-pattern" />
         
  <!-- Metadata -->
  <metadata>
    <generator>Circuit V2 Generator</generator>
    <created>${new Date().toISOString()}</created>
    <settings>
      <grid cellsX="${options.grid.cellsX}" cellsY="${options.grid.cellsY}" type="${options.grid.type}" />
      <canvas width="${options.canvas.width}" height="${options.canvas.height}" />
      <randomSeed>${options.randomSeed}</randomSeed>
      <enabledPatterns>${Object.keys(options.patterns.enabled).filter(p => options.patterns.enabled[p]).join(',')}</enabledPatterns>
    </settings>
  </metadata>
</svg>`;

      // Create blob and download
      const blob = new Blob([svgContent], { type: 'image/svg+xml;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${filename}.svg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setExportStatus('SVG exported successfully!');
      setTimeout(() => setExportStatus(''), 3000);
      
    } catch (error) {
      console.error('Export error:', error);
      setExportStatus('Export failed: ' + error.message);
      setTimeout(() => setExportStatus(''), 5000);
    }
    
    setIsExporting(false);
  };

  // Export as PNG for comparison
  const exportPNG = () => {
    setIsExporting(true);
    setExportStatus('Exporting PNG...');
    
    try {
      const canvas = canvasRef.current;
      if (!canvas) {
        throw new Error('Canvas not found');
      }

      const link = document.createElement('a');
      link.download = `${filename}.png`;
      link.href = canvas.toDataURL('image/png');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      setExportStatus('PNG exported successfully!');
      setTimeout(() => setExportStatus(''), 3000);
      
    } catch (error) {
      console.error('PNG export error:', error);
      setExportStatus('PNG export failed: ' + error.message);
      setTimeout(() => setExportStatus(''), 5000);
    }
    
    setIsExporting(false);
  };

  // Copy settings to clipboard
  const copySettings = () => {
    const settingsData = {
      generator: 'Circuit V2',
      timestamp: new Date().toISOString(),
      options: options
    };
    
    navigator.clipboard.writeText(JSON.stringify(settingsData, null, 2))
      .then(() => {
        setExportStatus('Settings copied to clipboard!');
        setTimeout(() => setExportStatus(''), 3000);
      })
      .catch(err => {
        setExportStatus('Failed to copy settings');
        setTimeout(() => setExportStatus(''), 3000);
      });
  };

  return (
    <div className="space-y-6">
      <div>
        <h3 className="font-medium mb-3 pb-1 border-b text-gray-800">Export Options</h3>
        <p className="text-sm text-gray-600">
          Export your circuit pattern in various formats with embedded metadata.
        </p>
      </div>

      {/* Filename Input */}
      <div>
        <label className="block text-sm font-medium mb-2">Filename</label>
        <input
          type="text"
          value={filename}
          onChange={e => setFilename(e.target.value.replace(/[^a-zA-Z0-9-_]/g, ''))}
          placeholder="circuit-v2-pattern"
          className="w-full p-2 border rounded-lg text-sm"
        />
        <span className="text-xs text-gray-500">Only letters, numbers, hyphens, and underscores allowed</span>
      </div>

      {/* Export Buttons */}
      <div className="space-y-3">
        <button
          onClick={exportSVG}
          disabled={isExporting}
          className={`w-full py-3 px-4 rounded-lg font-medium transition-all ${
            isExporting
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-green-500 hover:bg-green-600 text-white shadow-lg hover:shadow-xl'
          }`}
        >
          {isExporting ? (
            <span className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Exporting...
            </span>
          ) : (
            'üìÑ Export as SVG (Recommended)'
          )}
        </button>

        <button
          onClick={exportPNG}
          disabled={isExporting}
          className="w-full py-2 px-4 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
        >
          üñºÔ∏è Export as PNG
        </button>

        <button
          onClick={copySettings}
          className="w-full py-2 px-4 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors"
        >
          üìã Copy Settings to Clipboard
        </button>
      </div>

      {/* Export Status */}
      {exportStatus && (
        <div className={`p-3 rounded-lg text-sm ${
          exportStatus.includes('successfully') || exportStatus.includes('copied')
            ? 'bg-green-100 text-green-800'
            : exportStatus.includes('failed') || exportStatus.includes('Failed')
            ? 'bg-red-100 text-red-800'
            : 'bg-blue-100 text-blue-800'
        }`}>
          {exportStatus}
        </div>
      )}

      {/* Export Info */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-medium mb-2 text-gray-800">Export Information</h4>
        <div className="text-xs text-gray-600 space-y-1">
          <div>‚Ä¢ SVG format preserves vector quality and includes metadata</div>
          <div>‚Ä¢ PNG format provides raster image for immediate use</div>
          <div>‚Ä¢ Settings export allows recreation of exact patterns</div>
          <div>‚Ä¢ Current size: {options.canvas.width}√ó{options.canvas.height}px</div>
          <div>‚Ä¢ Grid configuration: {options.grid.cellsX}√ó{options.grid.cellsY} ({options.grid.type})</div>
          <div>‚Ä¢ Active patterns: {Object.values(options.patterns.enabled).filter(Boolean).length}</div>
        </div>
      </div>

      {/* Quality Tips */}
      <div className="bg-blue-50 p-3 rounded-lg">
        <h4 className="font-medium mb-2 text-blue-800">Export Tips</h4>
        <div className="text-xs text-blue-700 space-y-1">
          <div>‚Ä¢ Use larger canvas sizes for print-quality exports</div>
          <div>‚Ä¢ SVG files can be edited in vector graphics software</div>
          <div>‚Ä¢ Enable high-quality effects before exporting</div>
          <div>‚Ä¢ Save settings to recreate patterns later</div>
        </div>
      </div>
    </div>
  );
};

export default ExportPanel;
